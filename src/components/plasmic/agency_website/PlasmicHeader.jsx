// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 73xdGP9Q5fZ1cPjXq85afw
// Component: jbktukOjJD-L
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariantshFppFalB91Q } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: H-fppFalB91Q/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 73xdGP9Q5fZ1cPjXq85afw/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: jbktukOjJD-L/css
import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: wj4QmYzaI0CF/icon
import logosvg5UXGotsApaC4 from "./images/logosvg.svg"; // plasmic-import: 5uXGotsApaC4/picture

createPlasmicElementProxy;

export const PlasmicHeader__VariantProps = new Array();

export const PlasmicHeader__ArgProps = new Array();

const $$ = {};

function PlasmicHeader__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshFppFalB91Q()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__xcgUr)}
      >
        <PlasmicLink__
          className={classNames(projectcss.all, projectcss.a, sty.link___0FsjL)}
          href={`/`}
          platform={"react"}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"78px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"78px"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            src={logosvg5UXGotsApaC4}
          />
        </PlasmicLink__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___4YwYc)}
        >
          <Stack__
            as={PlasmicLink__}
            data-plasmic-name={"aboutUs"}
            data-plasmic-override={overrides.aboutUs}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.aboutUs)}
            href={`/about-us`}
            platform={"react"}
          >
            {false ? (
              <Icon29Icon
                className={classNames(projectcss.all, sty.svg__uoQjd)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hKeQf
              )}
            >
              {"About Us"}
            </div>
            {false ? (
              <Icon29Icon
                className={classNames(projectcss.all, sty.svg__ivm3O)}
                role={"img"}
              />
            ) : null}
          </Stack__>
          <Stack__
            as={PlasmicLink__}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.link__lr47)}
            href={`/services`}
            platform={"react"}
          >
            {false ? (
              <Icon29Icon
                className={classNames(projectcss.all, sty.svg___8BEi)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iwKay
              )}
            >
              {"Services"}
            </div>
            {false ? (
              <Icon29Icon
                className={classNames(projectcss.all, sty.svg__xSztr)}
                role={"img"}
              />
            ) : null}
          </Stack__>
          <Stack__
            as={PlasmicLink__}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__eq2If
            )}
            href={`/client`}
            platform={"react"}
          >
            {false ? (
              <Icon29Icon
                className={classNames(projectcss.all, sty.svg__wuYwR)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qtnJi
              )}
            >
              {"Clients"}
            </div>
            {false ? (
              <Icon29Icon
                className={classNames(projectcss.all, sty.svg__y65MQ)}
                role={"img"}
              />
            ) : null}
          </Stack__>
          <Stack__
            as={PlasmicLink__}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__yvN76
            )}
            platform={"react"}
          >
            {false ? (
              <Icon29Icon
                className={classNames(projectcss.all, sty.svg__qu0MK)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9Xl2O
              )}
            >
              {"Blog"}
            </div>
            {false ? (
              <Icon29Icon
                className={classNames(projectcss.all, sty.svg__ayAvK)}
                role={"img"}
              />
            ) : null}
          </Stack__>
          <Stack__
            as={PlasmicLink__}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__rl4QZ
            )}
            href={`/contact`}
            platform={"react"}
          >
            {false ? (
              <Icon29Icon
                className={classNames(projectcss.all, sty.svg__iMpbs)}
                role={"img"}
              />
            ) : null}
            <div
              data-plasmic-name={"contact"}
              data-plasmic-override={overrides.contact}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.contact
              )}
            >
              {"Contact Us"}
            </div>
            {false ? (
              <Icon29Icon
                className={classNames(projectcss.all, sty.svg__tSpe7)}
                role={"img"}
              />
            ) : null}
          </Stack__>
        </Stack__>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "aboutUs", "contact"],
  img: ["img"],
  aboutUs: ["aboutUs"],
  contact: ["contact"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    aboutUs: makeNodeComponent("aboutUs"),
    contact: makeNodeComponent("contact"),
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
